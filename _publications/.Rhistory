knitr::opts_chunk$set(echo = TRUE)
# Setup
rm(list = ls())
# Visualization
library(dplyr)
library(ggplot2)
library(patchwork)
# Root solving
library(rootSolve)
# Parallel processing
library(parallel)
library(doParallel)
# Gaussian processes
library(GPareto)
library(DiceKriging)
library(DiceOptim)
# Optimization
library(GA)
# Matrices
library(matlib)
# Random forest ML
library(randomForest)
# Training data
root.rel.train = read.csv('Bidentate-MC-InitGuessRoots.csv')
eq.samp.train = read.csv('Bidentate-MC-SampleCond.csv')
# Save space - remove the relative variables
root.rel.train = root.rel.train[names(root.rel.train) %in%
c('lg.M', 'lg.A', 'lg.H', 'conv', 'iter')]
# Combine into a single dataset
root.rel.train$ka1    = NaN; root.rel.train$ka2    = NaN
root.rel.train$Mtot   = NaN; root.rel.train$Atot   = NaN
root.rel.train$DIC    = NaN; root.rel.train$pCO2   = NaN
root.rel.train$Na.add = NaN
for(i in unique(root.rel.train$iter)){
pos = which(root.rel.train$iter == i)
root.rel.train$ka1[pos]    = eq.samp.train$ka1[i]
root.rel.train$ka2[pos]    = eq.samp.train$ka2[i]
root.rel.train$Mtot[pos]   = eq.samp.train$Mtot[i]
root.rel.train$Atot[pos]   = eq.samp.train$Atot[i]
root.rel.train$DIC[pos]    = eq.samp.train$DIC[i]
root.rel.train$pCO2[pos]   = eq.samp.train$pCO2[i]
root.rel.train$Na.add[pos] = eq.samp.train$Na.add[i]
}
root.rel.train = root.rel.train[!names(root.rel.train) %in% c('iter')]
rm(eq.samp.train)
root.rel.train$conv[root.rel.train$conv == 'Fail'] = FALSE
root.rel.train$conv[root.rel.train$conv == 'Pass'] = TRUE
root.rel.train$conv = as.factor(root.rel.train$conv)
sampleSet = sample(x = 1:nrow(root.rel.train), n = 1e4)
sampleSet = sample(x = 1:nrow(root.rel.train), size = 1e4)
DICroot.Dicarb = randomForest::randomForest(formula = conv ~
lg.M+lg.A+lg.H+ka1+ka2+Mtot+Atot+DIC+Na.add,
data = filter(root.rel.train, !is.na(DIC)),
subset = sampleSet)
sampleSet = sample(x = 1:nrow(root.rel.train), size = 1e4)
DICroot.Dicarb = randomForest::randomForest(formula = conv ~
lg.M+lg.A+lg.H+ka1+ka2+Mtot+Atot+DIC+Na.add,
data = filter(root.rel.train, !is.na(DIC)),
subset = sampleSet)
sampleSet = sample(x = 1:nrow(root.rel.train), size = 1e4)
DICroot.Dicarb = randomForest::randomForest(formula = conv ~
lg.M+lg.A+lg.H+ka1+ka2+Mtot+Atot+DIC+Na.add,
data = filter(root.rel.train, !is.na(DIC)),
subset = sampleSet)
sampleSet = sample(x = 1:nrow(root.rel.train), size = 1e4)
DICroot.Dicarb = randomForest::randomForest(formula = conv ~
lg.M+lg.A+lg.H,#+ka1+ka2+Mtot+Atot+DIC+Na.add,
data = filter(root.rel.train, !is.na(DIC)),
subset = sampleSet)
sampleSet = sample(x = 1:nrow(root.rel.train), size = 1e4)
DICroot.Dicarb = randomForest::randomForest(formula = conv ~
lg.M,#+lg.A+lg.H,#+ka1+ka2+Mtot+Atot+DIC+Na.add,
data = filter(root.rel.train, !is.na(DIC)),
subset = sampleSet)
unique(root.rel.train$conv[sampleSet])
(root.rel.train$conv[1:100])
