library(devtools)
devtools::install_github("crsh/papaja")
install.packages("citr")
library(citr)
md_cite("bem", bib_file = "references.bib")
md_cite("bem", bib_file = "r-references.bib")
getwd()
citr:::insert_citation()
omg_why <- length(sum(c(1, 2, 3) * 3)) + log(1)
my_name[omg_why]
omg_why
vector_example <- c(5, 6, 7, 8, 9, 10, 100)
results <- 2 * vector_example
results
vector_example * results
mean(vector_example)
median(vector_example)
mode(vector_example)
sd(vector_example) # standard deviation
sum(vector_example)
movie_metadata_100 <- movie_metadata[1:100, ]
for (j in 1:10) {
print(j)
}
for (i in 1:10) {
print(i)
}
columns_loop <- numeric()
for (row in 1:nrow(house)) {
columns_loop[row] <- length(house[row, ])
}
columns_loop <- numeric()
for (row in 1:nrow(iris)) {
columns_loop[row] <- length(iris[row, ])
}
columns_loop
iris
for (row in 1:nrow(iris)) {
columns_loop[row] <- length(iris[row, ])
}
columns_loop
nrow(iris)
ncol(iris)
data()
data(iris)
iris
columns <- apply(X = iris, FUN = length)
columns <- apply(X = iris, MARGIN = 1, FUN = length)
columns
columns <- apply(X = iris, MARGIN = 2, FUN = length)
columns
columns <- apply(X = iris, MARGIN = 2, FUN = length)
columns
columns <- apply(X = iris, MARGIN = 3, FUN = length)
columns <- apply(X = iris, MARGIN = 2, FUN = length)
?apply
iris_list <- as.list(iris)
iris_list
# check out the first five rows of the list
lapply(iris_list, head)
```
# check out the first five rows of the list
lapply(iris_list, head)
```
lapply(iris_list, head)
list(colors = c("red", "green", "blue"),
food = c("pizza", "sushi", "burger"),
drink = c("coffee", "tea", "juice"))
str(iris)
str(iris_list)
str(iris_list[1])
str(iris_list[[1]])
names(iris)
tapply(
X = iris,
INDEX = list(iris$Sepal.Length, iris$Sepal.Width),
FUN = mean,
na.rm = TRUE
)
```
tapply(
X = iris$Species,
INDEX = list(iris$Sepal.Length, iris$Sepal.Width),
FUN = mean,
na.rm = TRUE
)
```
```
tapply(
X = Petal.Length,
INDEX = list(iris$Sepal.Length, iris$Sepal.Width),
FUN = mean,
na.rm = TRUE
)
```
```
tapply(
X = iris$Petal.Length,
INDEX = list(iris$Sepal.Length, iris$Sepal.Width),
FUN = mean,
na.rm = TRUE
)
```
tapply(
X = iris$Species,
INDEX = list(house$Sepal.Length, house$Sepal.Width),
FUN = mean,
na.rm = TRUE
)
tapply(
X = iris$Species,
INDEX = list(iris$Sepal.Length, iris$Sepal.Width),
FUN = mean,
na.rm = TRUE
)
tapply(
X = iris$Sepal.Length,
INDEX = list(iris$Species),
FUN = mean,
na.rm = TRUE
)
iris %>%
group_by(Species) %>%
summarize(
mean_nom = mean(Sepal.Length, na.rm = TRUE)
)
library(tidyr)
iris %>%
group_by(Species) %>%
summarize(
mean_nom = mean(Sepal.Length, na.rm = TRUE)
)
library(tidyverse)
library(dplyr)
iris %>%
group_by(Species) %>%
summarize(
mean_nom = mean(Sepal.Length, na.rm = TRUE)
)
iris %>%
mutate_if(
.predicate = is.character,
.funs = as.factor
)
iris %>%
mutate_if(
.predicate = is.character,
.funs = as.factor
)
typoef(iris$Species)
typeof(iris$Species)
iris %>%
mutate_if(
.predicate = is.integer,
.funs = as.factor
)
typeof(iris$Species)
iris %>%
mutate_if(
.predicate = is.numeric,
.funs = is.character
)
iris %>%
mutate_if(
.predicate = is.numeric,
.funs = as.factor
)
typeof(iris$Petal.Length)
typeof(iris$Species)
iris %>%
mutate_if(
.predicate = as.integr,
.funs = as.factor
)
iris %>%
mutate_if(
.predicate = as.integer,
.funs = as.factor
)
iris %>%
mutate_if(
.predicate = is.integer,
.funs = as.factor
)
typeof(iris$Species)
iris %>%
mutate_if(
.predicate = as.integer,
.funs = as.factor
)
iris %>%
mutate_if(
.predicate = is.integer,
.funs = as.factor
)
typeof(iris$Species)
typeof(iris$Species)
iris %>%
mutate_if(
.predicate = is.integer,
.funs = is.character
)
typeof(iris$Species)
iris %>%
mutate_if(
.predicate = integer,
.funs = is.character
)
iris %>%
mutate_if(
.predicate = as.integer,
.funs = is.character
)
iris %>%
mutate_if(
.predicate = is.integer,
.funs = is.character
)
iris %>%
mutate_if(
.predicate = is.wholenumber,
.funs = is.character
)
iris %>%
mutate_if(
.predicate = is.numeric,
.funs = is.integer
)
iris %>%
mutate_if(
.predicate = is.numeric,
.funs = is.character
)
iris %>%
mutate_if(
.predicate = is.numeric,
.funs = is.character
)
typeof(iris$Sepal.Length)
iris %>%
mutate_if(
.predicate = is.numeric,
.funs = is.na
)
iris %>%
mutate_if(
.predicate = is.numeric,
.funs = length
)
select_if(iris, is.numeric)
```
iris %>%
mutate_at(
.vars = vars(starts_with("Sepal")),
.funs = function(x) x / 100
) %>%
select(starts_with("Sepal"))
```
```
make_half <- function(x) {
return(x / 2)
}
make_half(88)
```
function(x) {
return(x / 2)
}
function(88)
sapply(1:2, function(x) x + 1L)
sapply(88, function(x) x / 2)
select_if(
iris,
.predicate = ~ sum(is.na(.)) > 0
)
select_if(
iris,
.predicate = ~ sum(is.numeric(.)) > 0
)
select_if(
iris,
.predicate = ~ sum(is.numeric(.)) > 5
)
select_if(
iris,
.predicate = ~ sum(is.numeric(.)) > 100
)
select_if(
iris,
.predicate = ~ sum(is.numeric(.)) < 100
)
select_if(
iris,
.predicate = ~ sum(is.numeric(.)) < 5
)
select_if(
iris,
.predicate = ~ sum(is.numeric(.))
)
select_if(
iris,
.predicate = ~ sum(is.numeric(.)) > 0
)
```
select_if(
iris,
.predicate = ~ sum(is.numeric(.)) > 0
)
```
select_if(
iris,
.predicate = ~ sum(is.numeric(.)) > 0
)
```
iris %>%
mutate_at(
.vars = vars(Sepal.Length, Sepal.Width),
.funs = ~ . / 100
)
```
summarize_all(
house,
.funs = list(uniques = ~ n_distinct(.),
obj_type = class)
)
summarize_all(
iris,
.funs = list(uniques = ~ n_distinct(.),
obj_type = class)
)
summarize_all(
iris,
.funs = list(uniques = ~ Sepal.Length(.),
obj_type = class)
)
summarize_all(
iris,
.funs = list(uniques = ~ Sepal.Length(.),
obj_type = class)
)
summarize_all(
iris,
.funs = list(uniques = ~ n_distinct(.),
obj_type = class)
)
# df1 is a nested data frame
(df1 <- tibble(
g = c(1, 2, 3),
data = list(
tibble(x = 1, y = 2),
tibble(x = 4:5, y = 6:7),
tibble(x = 10)
)
))
df1
data
```
iris %>%
group_by(Species) %>%
nest()
```
```
nested_house <- iris %>%
group_by(Species) %>%
nest() %>%
print()
```
```
nested_iris <- iris %>%
group_by(Species) %>%
nest() %>%
print()
```
nested_models <- nested_iris %>%
mutate(
model = map(
.x = data,
.f = ~ lm(Petal.Length ~ Petal.Width, data = .x)
)
) %>%
print()
nested_models <- nested_iris %>%
mutate(
model = map(
.x = data,
.f = ~ lm(Petal.Length ~ Petal.Width, data = .x)
)
) %>%
print()
library(purrr)
nested_models <- nested_iris %>%
mutate(
model = map(
.x = data,
.f = ~ lm(Petal.Length ~ Petal.Width, data = .x)
)
) %>%
print()
nested_models
nested_models$Species
nested_models$data
nested_models$model
nested_tidy <- nested_models %>%
mutate(coefs = map(model, tidy, conf.int = TRUE)) %>%
print()
nested_tidy <- nested_models %>%
mutate(coefs = map(model, conf.int = TRUE)) %>%
print()
nested_models
nested_tidy <- nested_models %>%
mutate(coefs = map(model, conf.int = TRUE)) %>%
print()
nested_models <- nested_iris %>%
mutate(
model = map(
.x = data,
.f = ~ lm(Petal.Length ~ Petal.Width, data = .x)
)
) %>%
print()
nested_tidy <- nested_models %>%
mutate(coefs = map(model, conf.int = TRUE)) %>%
print()
nested_tidy <- nested_models %>%
mutate(coefs = map(model)) %>%
print()
nested_tidy <- nested_models %>%
mutate(coefs = map(model)) %>%
print()
nested_models <- nested_iris %>%
mutate(
model = map(
.x = data,
.f = ~ lm(Petal.Length ~ Petal.Width, data = .x)
)
) %>%
print()
nested_tidy <- nested_models %>%
mutate(coefs = map(model)) %>%
print()
model
nested_tidy <- nested_models %>%
mutate(coefs = map(model, tidy, conf.int = TRUE)) %>%
print()
nested_models
nested_models$model
nested_tidy <- nested_models %>%
mutate(coefs = map(model, coefficients)) %>%
print()
nested_tidy$coefs
nested_tidy <- nested_models %>%
mutate(coefs = map(model, tidy, coefficients)) %>%
print()
coefs <- nested_tidy %>%
unnest(coefs) %>%
print()
nested_tidy %>% unnest(model)
nested_tidy %>% pull(model)
